@startuml
class View.ViewPiece {
+ Type type
+ Team team
+ int position
+ BufferedImage image
+ BufferedImage extraLargeImage
+ BufferedImage largeImage
+ BufferedImage smallImage
+ BufferedImage extraSmallImage
}
class Model.Pieces.Pawn {
+ {static} int value
+ List<Move> getPossibleMoves(int,Board)
+ List<Move> getPossibleThreats(int,Board)
}
class Model.Clock {
- boolean enabled
- int whiteClock_Seconds
- int blackClock_Seconds
~ Team currentPlayer
- Timer timer
- View view
- Controller controller
+ Team getCurrentPlayer()
+ void nextPlayer()
+ void start()
+ void setEnabled(boolean)
+ int getTime()
+ int getTime(Team)
+ void setTime(Team,int)
+ void actionPerformed(ActionEvent)
+ Clock clone()
}
enum Model.Team {
+  WHITE
+  BLACK
}
class Model.MoveHistory {
+ {static} int numberOfMoves
+ int moveID
+ Team currentPlayer
+ List<Piece> whitePieces
+ List<Piece> blackPieces
+ List<Piece> deadPieces
+ Move move
+ Clock clock
- List<Piece> copyPieceList(List<Piece>)
}
interface View.IDrawAi {
~ void createMove()
~ boolean isAiTurn()
~ void upgradePawn()
~ Team getTeam()
~ boolean isEnabled()
}
interface View.IDrawModel {
~ List<ViewPiece> getPiecesOnTheBoard()
~ List<ViewPiece> getDeadViewPieces(Team)
~ void upgradePawn(Type)
~ Team getTeam()
~ Move getLastMove()
~ Piece getPiece(int)
~ int getScore()
~ void undoMove()
~ void undoMove(int)
}
enum Model.Direction {
+  NORTH
+  EAST
+  SOUTH
+  WEST
+  NORTHEAST
+  NORTHWEST
+  SOUTHEAST
+  SOUTHWEST
+ int direction
+ int getDirection(int)
}
class Model.Model {
- Board board
- Clock clock
+ void installClock(Clock)
- List<Move> getPossibleMoves()
- List<Move> getPossibleThreats()
+ boolean kingInCheck()
- boolean kingInCheckIfIgnoringOnePiece(Piece)
+ List<Move> getLegalMoves()
- Piece getKing()
- Piece getKing(Team)
+ List<ViewPiece> getPiecesOnTheBoard()
+ List<ViewPiece> getDeadViewPieces(Team)
+ Team getTeam()
+ boolean isSquareFriendly(int)
+ List<Piece> getAllPieces()
+ Piece getPiece(int)
+ int getScore()
+ int getCurrentTurn()
+ void doMove(Move)
+ void undoMove()
+ void undoMove(int)
+ void upgradePawn(Type)
- void updateCastlingLegality(Move)
- List<PinnedPiece> getPinnedPieces()
+ List<Piece> getDeadPieces()
+ Move getLastMove()
}
enum Controller.GameState {
+  MAIN_MENU
+  CREATE_GAME
+  ACTIVE_GAME
+  UPGRADE_PAWN
+  CHECK_MATE
+  DRAW
+  TIME_OUT
}
class Controller.Controller {
- Integer[] clickHolder
- List<Move> selectedLegalMoves
- Model model
- GameState gameState
- AI ai
- View view
+ void installModel(Model)
+ void installAI(AI)
+ void mousePressed(MouseEvent)
- void handleClicks(int)
- int rawCoordsToSquare(int,int)
- void updateSelectedLegalMoves(int)
- void createMove(int,int)
# void checkPawnUpgrade(Move)
# boolean checkIfGameOver()
# void handleGameOver()
+ List<Integer> getLegalSquares()
+ GameState getGameState()
+ void setGameState(GameState)
}
class Model.GetLines {
+ {static} List<Move> getMoves(int,Board,boolean,boolean)
+ {static} List<Integer> getLine(int,int)
- {static} List<Integer> findSquares(int,Board,boolean,boolean)
- {static} List<Integer> checkDirection(int,int,int,int,Board)
- {static} List<Integer> checkDirection(int,int,int,Board)
}
class Model.Pieces.Queen {
+ {static} int value
+ List<Move> getPossibleMoves(int,Board)
}
interface Controller.IMovable {
~ List<Piece> getAllPieces()
~ Piece getPiece(int)
~ void doMove(Move)
~ boolean kingInCheck()
~ List<Move> getLegalMoves()
}
class View.TextButton {
~ ButtonAction action
~ String text
+ void drawButton(Graphics,Color)
+ void mouseClicked(MouseEvent)
+ void mousePressed(MouseEvent)
+ void mouseReleased(MouseEvent)
+ void mouseEntered(MouseEvent)
+ void mouseExited(MouseEvent)
}
class Model.Square {
- {static} int maxSquares
- {static} int numberOfSquares
- int Id
- T piece
~ int getSquareId()
~ void setPiece(T)
+ T getPiece()
+ boolean isEmpty()
+ void removePiece()
+ {static} void resetNumberOfSquares()
}
class Model.Pieces.King {
+ boolean castleKingSide
+ boolean castleQueenSide
+ {static} int value
+ List<Move> getPossibleMoves(int,Board)
+ void setCastleKingSideToFalse()
+ void setCastleQueenSideToFalse()
}
class Model.Pieces.Bishop {
+ {static} int value
+ List<Move> getPossibleMoves(int,Board)
}
class View.GraphicHelperMethods {
+ {static} int getStringWidth(Graphics,Font,String)
+ {static} int getStringHeight(Graphics,Font,String)
+ {static} int getStringAscent(Graphics,Font)
+ {static} void drawCenteredString(Graphics,String,int,int,int,int)
}
class Controller.AI {
- Controller controller
- boolean enabled
- Team AI_TEAM
- IAiMovable model
- Random random
- int AI_SEARCH_DEPTH
- boolean randomAI
+ void installModel(IAiMovable)
+ Team getTeam()
+ void createMove()
+ boolean isAiTurn()
+ boolean isEnabled()
+ void upgradePawn()
- Move getBestMove(List<Move>,IAiMovable)
- List<Move> preSortMovesList(List<Move>)
- int minimax(int,IAiMovable,int,int,boolean)
- boolean isNodeTerminal(IAiMovable)
- int evaluatePosition(IAiMovable)
}
class Model.Move {
+ int from
+ int to
- boolean castle
+ Move castleRookMove
~ boolean enPassant
+ int enPassantPosition
+ boolean isMoveCastle()
+ boolean isEnPassant()
+ int[] getMove()
+ String toString()
+ boolean equals(Object)
+ int hashCode()
}
class Main.Constants {
+ {static} int boardOffset
+ {static} int displayWidth
+ {static} int displayHeight
+ {static} int TIME_MINUTES
+ {static} int TIME_ADDED_EACH_MOVE_SECONDS
+ {static} BufferedImage pawnW
+ {static} BufferedImage rookW
+ {static} BufferedImage knightW
+ {static} BufferedImage bishopW
+ {static} BufferedImage queenW
+ {static} BufferedImage kingW
+ {static} BufferedImage pawnB
+ {static} BufferedImage rookB
+ {static} BufferedImage knightB
+ {static} BufferedImage bishopB
+ {static} BufferedImage queenB
+ {static} BufferedImage kingB
+ {static} BufferedImage rookWB
}
interface Model.Pieces.IPiece {
~ Team getTeam()
~ Type getPiece()
~ int getPosition()
~ void setPosition(int)
~ List<Move> getPossibleMoves(int,Board)
}
interface View.IDrawController {
~ List<Integer> getLegalSquares()
~ GameState getGameState()
~ void setGameState(GameState)
~ void installModel(Model)
~ void installAI(AI)
}
class Model.PinnedPiece {
+ int pinnedPiece
+ int pinnedFrom
+ boolean equals(Object)
+ int hashCode()
}
class Model.Board {
- Square<Piece>[] squares
# List<Piece> whitePieces
# List<Piece> blackPieces
# List<Piece> deadPieces
+ Stack<MoveHistory> moveHistoryList
- Team currentPlayer
- Clock clock
- boolean testing
+ void installClock(Clock)
+ void createBoard()
+ void initBoard()
+ Square<Piece> getSquare(int)
+ Piece getPiece(int)
+ int getScore()
+ Team getTeam()
- void nextTeam()
+ void doMove(Move)
+ void upgradePawn(Type)
+ void undoMove(int)
+ void loadBoardFromMoveHistory(MoveHistory)
- void kill(int)
+ boolean isSquareFriendly(int)
# List<Square> squaresBetween(int,int)
}
enum Model.Type {
+  PAWN
+  ROOK
+  KNIGHT
+  BISHOP
+  QUEEN
+  KING
}
class Main.Main {
+ {static} void main(String[])
}
interface View.ButtonAction {
~ void executeAction()
}
interface Controller.IAiMovable {
~ Piece getPiece(int)
~ List<Piece> getAllPieces()
~ void doMove(Move)
~ void undoMove()
~ List<Move> getLegalMoves()
~ int getScore()
~ int getCurrentTurn()
~ void upgradePawn(Type)
~ Team getTeam()
}
class View.View {
~ List<Integer> legalSquares
- Team selectTeam
# IDrawController controller
# IDrawModel model
# IDrawAi ai
- Clock clock
- int minutesPerSide
- int secondsPerMove
+ int upgradePawnBoxHeight
+ int upgradePawnBoxWidth
- GameState previousGameState
- {static} Color colorBackground
- {static} Color colorDarkSquare
- {static} Color colorLightSquare
- {static} Color colorHighlightSquare
- {static} Color colorPawnUpgradeBG
- {static} Color colorButton
- List<Button> createGame_buttonsList
- List<Button> upgradeButtonsWhite
- List<Button> upgradeButtonsBlack
- List<Button> hudButtons
- List<Button> endScreenButtons
+ void installController(Controller)
+ void installClock(Clock)
+ void paintComponent(Graphics)
- int[] inverseSquareToCoords(int)
- void mainMenu(Graphics)
- void createGameScreen(Graphics)
- void createGame()
- void boardLayer(Graphics)
- void drawShapeInSquare(Graphics,Integer,int)
- void pieceLayer(Graphics)
- void drawPieceToSize(Graphics,int,int,Type,BufferedImage)
- void hudLayer(Graphics)
- void endScreen(Graphics,String)
- void drawDeadPieces(Graphics,JLayeredPane)
- void drawClock(Graphics)
+ List<Button> getUpgradeButtons(Team)
- List<Button> getCreateGameButtons()
- List<Button> getHudButtons()
- List<Button> getEndScreenButtons()
+ void resizeEvent()
}
interface Model.IBoard {
~ void createBoard()
~ void initBoard()
~ Square<Piece> getSquare(int)
~ Piece getPiece(int)
+ void doMove(Move)
~ {static} int[] squareToCoordinates(int)
~ {static} int coordinatesToSquare(int[])
}
abstract class View.Button {
# int xPos
# int yPos
# int width
# int height
# int currentXPos
# int currentYPos
- boolean stickToEdgeOfScreen
# Color previousColor
# JLayeredPane pane
# GameState gameStateWhenCreated
# View view
# boolean updatePosition
+ void drawButton(Graphics,Color)
- void updateButtonPosition()
+ int[] getEndPosition()
+ boolean isVisible()
+ boolean mouseIsOverButton(int,int)
}
class Model.Pieces.Knight {
+ {static} int value
+ List<Move> getPossibleMoves(int,Board)
}
class Model.Pieces.Rook {
+ {static} int value
+ List<Move> getPossibleMoves(int,Board)
}
class View.imageButton {
+ BufferedImage image
+ Type type
+ ButtonAction action
+ void drawButton(Graphics,Color)
+ void mouseClicked(MouseEvent)
+ void mousePressed(MouseEvent)
+ void mouseReleased(MouseEvent)
+ void mouseEntered(MouseEvent)
+ void mouseExited(MouseEvent)
}
abstract class Model.Pieces.Piece {
+ Type type
+ Team team
- int position
+ int value
+ Team getTeam()
+ Type getPiece()
+ int getPosition()
+ void setPosition(int)
+ boolean equals(Object)
+ int hashCode()
+ Piece clone()
}


Model.Pieces.Piece <|-- Model.Pieces.Pawn
java.awt.event.ActionListener <|.. Model.Clock
Model.Cloneable <|.. Model.Clock
Controller.IMovable <|.. Model.Model
Controller.IAiMovable <|.. Model.Model
View.IDrawModel <|.. Model.Model
View.IDrawController <|.. Controller.Controller
java.awt.event.MouseAdapter <|-- Controller.Controller
Model.Pieces.Piece <|-- Model.Pieces.Queen
View.Button <|-- View.TextButton
Model.Pieces.Piece <|-- Model.Pieces.King
Model.Pieces.Piece <|-- Model.Pieces.Bishop
View.IDrawAi <|.. Controller.AI
Model.IBoard <|.. Model.Board
View.JComponent <|-- View.View
java.awt.event.MouseListener <|.. View.Button
Model.Pieces.Piece <|-- Model.Pieces.Knight
Model.Pieces.Piece <|-- Model.Pieces.Rook
View.Button <|-- View.imageButton
Model.Pieces.IPiece <|.. Model.Pieces.Piece
Model.Pieces.Cloneable <|.. Model.Pieces.Piece
@enduml